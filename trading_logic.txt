# Binance 선물 자동매매 시스템 - 트레이딩 로직 정리

## 1. 시스템 개요
- **거래소**: Binance Futures (선물)
- **전략**: 트렌드 추종 전략 (Trend Following)
- **레버리지**: 3배 (설정 가능 1-125배)
- **리스크 관리**: 거래당 총 자본의 1%
- **거래 방식**: 양방향 (롱/숏 동시 보유 가능)

## 2. 핵심 설정
### 2.1 기본 설정
- **심볼**: BTCUSDT (설정 가능)
- **타임프레임**: 4시간 (설정 가능)
- **마진 타입**: 격리 마진 (ISOLATED)
- **포지션 모드**: 양방향 (dualSidePosition=True)

### 2.2 리스크 관리
- **거래당 리스크**: 총 자본의 1%
- **계좌 사용률**: 가용 잔고의 90%까지만 사용
- **거래 쿨다운**: 4시간 (과도한 거래 방지)
- **최대 손절 범위**: 5% 제한

## 3. 기술적 분석 지표
### 3.1 이동평균선 (EMA)
- **EMA10**: 단기 추세
- **EMA20**: 중기 추세  
- **EMA50**: 장기 추세

### 3.2 추세 판단
- **정배열 (상승추세)**: EMA10 > EMA20 > EMA50
- **역배열 (하락추세)**: EMA10 < EMA20 < EMA50

## 4. 진입 조건 (Entry Conditions)

### 4.1 롱 포지션 진입 조건
1. **추세 확인**: EMA 정배열 상태
2. **조정 구간**: 눌림목 패턴 확인
3. **횡보 구간**: 5개 캔들 기준 2% 이내 박스권 형성
4. **돌파 확인**: 박스권 상향 돌파
5. **캔들 패턴**: 현재 캔들이 양봉
6. **거래량 확인**: 평균 거래량의 120% 이상

### 4.2 숏 포지션 진입 조건
1. **추세 확인**: EMA 역배열 상태
2. **조정 구간**: 반등 패턴 확인
3. **횡보 구간**: 5개 캔들 기준 2% 이내 박스권 형성
4. **돌파 확인**: 박스권 하향 돌파
5. **캔들 패턴**: 현재 캔들이 음봉
6. **거래량 확인**: 평균 거래량의 120% 이상

### 4.3 포지션 크기 계산
```
손절가 = min(현재캔들 저가, 이전캔들 저가)  // 롱의 경우
손절 비율 = (현재가 - 손절가) / 현재가
리스크 금액 = 총자본 × 1%
포지션 크기 = (리스크 금액 ÷ 손절 비율) × 레버리지
```

## 5. 청산 조건 (Exit Conditions)

### 5.1 롱 포지션 청산
1. **손절**: 미리 설정한 손절가 도달
2. **1차 익절**: 양봉 후 음봉 패턴 → 1/3 물량 청산
3. **EMA 익절**: 가격이 EMA20 아래로 이탈 → 전량 청산

### 5.2 숏 포지션 청산
1. **손절**: 미리 설정한 손절가 도달
2. **1차 익절**: 음봉 후 양봉 패턴 → 1/3 물량 청산
3. **EMA 익절**: 가격이 EMA20 위로 이탈 → 전량 청산

## 6. 안전장치 (Safety Features)

### 6.1 거래 제한
- **쿨다운 시스템**: 마지막 거래 후 4시간 대기
- **최소 주문 금액**: 5 USDT 이상
- **최대 거래 금액**: 설정 가능 (무제한)
- **수량 정밀도**: 심볼별 정밀도 자동 적용

### 6.2 오류 처리
- **API 오류**: 재시도 로직 및 로그 기록
- **네트워크 오류**: 연결 상태 확인 및 복구
- **잘못된 주문**: 사전 검증 및 거부

## 7. 데이터 관리

### 7.1 데이터베이스 저장
- **시장 데이터**: OHLCV + EMA 값
- **거래 내역**: 모든 진입/청산 기록
- **포지션 상태**: 실시간 포지션 정보
- **성과 분석**: 손익, 승률 등 통계

### 7.2 로그 기록
- **파일 로그**: futures_trading.log
- **콘솔 출력**: 실시간 상태 표시
- **레벨**: INFO, WARNING, ERROR

## 8. 테스트 모드 (Test Mode)

### 8.1 테스트 모드 특징
- **실제 거래 없음**: 모든 주문이 시뮬레이션
- **가상 자본**: 10,000 USDT (기본값)
- **실제 데이터**: 실시간 시장 데이터 사용
- **완전한 로그**: 모든 신호와 거래 기록

### 8.2 성과 분석 가능 항목
- **총 거래 횟수**: 진입/청산 횟수
- **승률**: 수익 거래 / 전체 거래
- **손익비**: 평균 수익 / 평균 손실
- **최대 손실**: 최대 드로우다운
- **누적 수익률**: 기간별 수익률
- **샤프 비율**: 위험 대비 수익률

## 9. 실행 주기 (Execution Cycle)

### 9.1 메인 루프
- **체크 주기**: 5분마다 전략 실행
- **대기 시간**: 10초마다 상태 확인
- **포지션 업데이트**: 매 실행시마다

### 9.2 실행 순서
1. 최신 시장 데이터 수집
2. 기술적 지표 계산 (EMA)
3. 현재 포지션 상태 확인
4. 청산 조건 우선 확인
5. 진입 조건 확인
6. 주문 실행 (테스트/실제)
7. 데이터베이스 저장
8. 로그 기록

## 10. 설정 파일 (config_futures.json)

### 10.1 필수 설정
```json
{
    "api_key": "YOUR_API_KEY",
    "api_secret": "YOUR_API_SECRET", 
    "symbol": "BTCUSDT",
    "timeframe": "4h",
    "leverage": 3,
    "test_mode": true,
    "test_initial_capital": 10000,
    "max_trade_amount": null
}
```

### 10.2 환경 변수 (.env)
```
BINANCE_API_KEY=your_api_key_here
BINANCE_API_SECRET=your_api_secret_here
```

## 11. AWS 서버 배포 및 실행

### 11.1 서버 설정
```bash
# 1. 저장소 클론
git clone https://github.com/your-repo/trend-following-trading.git
cd trend-following-trading

# 2. 가상환경 설정
python3 -m venv venv
source venv/bin/activate

# 3. 패키지 설치
pip install -r requirements.txt

# 4. 설정 파일 편집
nano config_futures.json
# test_mode: true로 설정

# 5. 백그라운드 실행
nohup python auto_trader_futures.py > output.log 2>&1 &
```

### 11.2 모니터링
```bash
# 로그 실시간 확인
tail -f futures_trading.log

# 프로세스 상태 확인
ps aux | grep auto_trader_futures

# 성과 분석 (데이터베이스 쿼리)
python -c "from database import TradingDatabase; db = TradingDatabase(); print(db.get_trading_stats())"
```

## 12. 성과 분석 예시

### 12.1 기본 통계
- **총 거래 수**: 50회
- **승리 거래**: 32회
- **패배 거래**: 18회  
- **승률**: 64%
- **평균 수익**: +2.5%
- **평균 손실**: -1.2%
- **손익비**: 2.08
- **최대 연속 승리**: 8회
- **최대 연속 패배**: 3회

### 12.2 월간 성과
- **1월**: +12.5%
- **2월**: -3.2%
- **3월**: +8.7%
- **누적 수익률**: +18.0%

이 시스템은 완전히 자동화되어 있으며, 테스트 모드에서 실제 시장 상황을 시뮬레이션하여 전략의 효과를 검증할 수 있습니다. 